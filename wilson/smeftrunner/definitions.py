'Ge''Ge'"""Definitions of auxiliary objects and operator properties."""

import numpy as np
from wilson.util import smeftutil


I3 = np.identity(3)


# elements that are redundant and can thus be omitted in the input/output
redundant_elements = {'G': [],
 'Gd': [],
 'Ge': [],
 'Gtilde': [],
 'Gu': [],
 'Lambda': [],
 'Theta': [],
 'Thetap': [],
 'Thetas': [],
 'W': [],
 'Wtilde': [],
 'dB': [],
 'dG': [],
 'dW': [],
 'dd': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'dphi': [],
 'duql': [],
 'duue': [],
 'eB': [],
 'eW': [],
 'ed': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'ee': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 1, 1, 0),
  (0, 1, 2, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (0, 2, 1, 1),
  (0, 2, 2, 0),
  (0, 2, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (1, 2, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'ephi': [],
 'eu': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'g': [],
 'gp': [],
 'gs': [],
 'ld': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'le': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'ledq': [],
 'lequ1': [],
 'lequ3': [],
 'll': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'llphiphi': [(1, 0), (2, 0), (2, 1)],
 'lq1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'lq3': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'lu': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'm2': [],
 'phi': [],
 'phiB': [],
 'phiBox': [],
 'phiBtilde': [],
 'phiD': [],
 'phiG': [],
 'phiGtilde': [],
 'phiW': [],
 'phiWB': [],
 'phiWtilde': [],
 'phiWtildeB': [],
 'phid': [(1, 0), (2, 0), (2, 1)],
 'phie': [(1, 0), (2, 0), (2, 1)],
 'phil1': [(1, 0), (2, 0), (2, 1)],
 'phil3': [(1, 0), (2, 0), (2, 1)],
 'phiq1': [(1, 0), (2, 0), (2, 1)],
 'phiq3': [(1, 0), (2, 0), (2, 1)],
 'phiu': [(1, 0), (2, 0), (2, 1)],
 'phiud': [],
 'qd1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qd8': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qe': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qq1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qq3': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qqql': [(1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2)],
 'qque': [(1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2)],
 'qu1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'qu8': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'quqd1': [],
 'quqd8': [],
 'uB': [],
 'uG': [],
 'uW': [],
 'ud1': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'ud8': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 1, 0),
  (2, 2, 2, 0),
  (2, 2, 2, 1)],
 'uphi': [],
 'uu': [(0, 0, 1, 0),
  (0, 0, 2, 0),
  (0, 0, 2, 1),
  (0, 1, 0, 0),
  (0, 2, 0, 0),
  (0, 2, 0, 1),
  (0, 2, 1, 0),
  (1, 0, 0, 0),
  (1, 0, 0, 1),
  (1, 0, 0, 2),
  (1, 0, 1, 0),
  (1, 0, 1, 1),
  (1, 0, 1, 2),
  (1, 0, 2, 0),
  (1, 0, 2, 1),
  (1, 0, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 0, 1),
  (1, 1, 0, 2),
  (1, 1, 1, 0),
  (1, 1, 2, 0),
  (1, 1, 2, 1),
  (1, 2, 0, 0),
  (1, 2, 0, 1),
  (1, 2, 0, 2),
  (1, 2, 1, 0),
  (1, 2, 1, 1),
  (1, 2, 2, 0),
  (2, 0, 0, 0),
  (2, 0, 0, 1),
  (2, 0, 0, 2),
  (2, 0, 1, 0),
  (2, 0, 1, 1),
  (2, 0, 1, 2),
  (2, 0, 2, 0),
  (2, 0, 2, 1),
  (2, 0, 2, 2),
  (2, 1, 0, 0),
  (2, 1, 0, 1),
  (2, 1, 0, 2),
  (2, 1, 1, 0),
  (2, 1, 1, 1),
  (2, 1, 1, 2),
  (2, 1, 2, 0),
  (2, 1, 2, 1),
  (2, 1, 2, 2),
  (2, 2, 0, 0),
  (2, 2, 0, 1),
  (2, 2, 0, 2),
  (2, 2, 1, 0),
  (2, 2, 1, 1),
  (2, 2, 1, 2),
  (2, 2, 2, 0),
  (2, 2, 2, 1)]}

# elements where the imaginary part must be zero and which can thus
# be omitted in the input/output
vanishing_im_parts = {'G': [],
 'Gd': [],
 'Ge': [],
 'Gtilde': [],
 'Gu': [],
 'Lambda': [],
 'Theta': [],
 'Thetap': [],
 'Thetas': [],
 'W': [],
 'Wtilde': [],
 'dB': [],
 'dG': [],
 'dW': [],
 'dd': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'dphi': [],
 'duql': [],
 'duue': [],
 'eB': [],
 'eW': [],
 'ed': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'ee': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'ephi': [],
 'eu': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'g': [],
 'gp': [],
 'gs': [],
 'ld': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'le': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'ledq': [],
 'lequ1': [],
 'lequ3': [],
 'll': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'llphiphi': [],
 'lq1': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'lq3': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'lu': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'm2': [],
 'phi': [],
 'phiB': [],
 'phiBox': [],
 'phiBtilde': [],
 'phiD': [],
 'phiG': [],
 'phiGtilde': [],
 'phiW': [],
 'phiWB': [],
 'phiWtilde': [],
 'phiWtildeB': [],
 'phid': [(0, 0), (1, 1), (2, 2)],
 'phie': [(0, 0), (1, 1), (2, 2)],
 'phil1': [(0, 0), (1, 1), (2, 2)],
 'phil3': [(0, 0), (1, 1), (2, 2)],
 'phiq1': [(0, 0), (1, 1), (2, 2)],
 'phiq3': [(0, 0), (1, 1), (2, 2)],
 'phiu': [(0, 0), (1, 1), (2, 2)],
 'phiud': [],
 'qd1': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'qd8': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'qe': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'qq1': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'qq3': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)],
 'qqql': [],
 'qque': [],
 'qu1': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'qu8': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'quqd1': [],
 'quqd8': [],
 'uB': [],
 'uG': [],
 'uW': [],
 'ud1': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'ud8': [(1, 1, 2, 2),
  (2, 2, 1, 1),
  (2, 2, 2, 2),
  (1, 1, 0, 0),
  (1, 1, 1, 1),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2),
  (2, 2, 0, 0)],
 'uphi': [],
 'uu': [(1, 1, 2, 2),
  (2, 2, 2, 2),
  (1, 2, 2, 1),
  (1, 1, 1, 1),
  (0, 2, 2, 0),
  (0, 1, 1, 0),
  (0, 0, 0, 0),
  (0, 0, 1, 1),
  (0, 0, 2, 2)]}

def argdet(U):
    return np.angle(np.linalg.det(U))

def flavor_rotation(C_in, Uq, Uu, Ud, Ul, Ue, sm_parameters=True):
    """Gauge-invariant $U(3)^5$ flavor rotation of all Wilson coefficients and
    SM parameters."""
    C = {}
    if sm_parameters:
        # shift of theta terms, see 0907.4763
        C['Thetas'] = C_in['Thetas'] - 2*argdet(Uq) + argdet(Uu) + argdet(Ud)
        C['Theta'] = C_in['Theta'] - 3*argdet(Uq) - argdet(Ul)
        C['Thetap'] = ( C_in['Thetap'] - (1/6)*argdet(Uq) + (4/3)*argdet(Uu) + (1/3)*argdet(Ud)
                                       - (1/2)*argdet(Ul) + argdet(Ue))
        # nothing to do for scalar SM parameters
        for k in ['g', 'gp', 'gs', 'Lambda', 'm2']:
            C[k] = C_in[k]
        C['Ge'] = Ul.conj().T @ C_in['Ge'] @ Ue
        C['Gu'] = Uq.conj().T @ C_in['Gu'] @ Uu
        C['Gd'] = Uq.conj().T @ C_in['Gd'] @ Ud
    # nothing to do for purely bosonic operators
    for k in smeftutil.WC_keys_0f:
        C[k] = C_in[k]
    # see 1704.03888 table 4 (but staying SU(2) invariant here)
    # LR
    for k in ['ephi', 'eW', 'eB']:
        C[k] = Ul.conj().T @ C_in[k] @ Ue
    for k in ['uphi', 'uW', 'uB', 'uG']:
        C[k] = Uq.conj().T @ C_in[k] @ Uu
    for k in ['dphi', 'dW', 'dB', 'dG']:
        C[k] = Uq.conj().T @ C_in[k] @ Ud
    # LL
    for k in ['phil1', 'phil3']:
        C[k] = Ul.conj().T @ C_in[k] @ Ul
    for k in ['phiq1', 'phiq3']:
        C[k] = Uq.conj().T @ C_in[k] @ Uq
    C['llphiphi'] = Ul.T @ C_in['llphiphi'] @ Ul
    # RR
    C['phie'] = Ue.conj().T @ C_in['phie'] @ Ue
    C['phiu'] = Uu.conj().T @ C_in['phiu'] @ Uu
    C['phid'] = Ud.conj().T @ C_in['phid'] @ Ud
    C['phiud'] = Uu.conj().T @ C_in['phiud'] @ Ud
    # 4-fermion
    C['ll'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Ul, Ul.conj(), Ul.conj(), C_in['ll'])
    C['ee'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Ue, Ue.conj(), Ue.conj(), C_in['ee'])
    C['le'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Ue, Ul.conj(), Ue.conj(), C_in['le'])
    C['qq1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Uq, Uq.conj(), Uq.conj(), C_in['qq1'])
    C['qq3'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Uq, Uq.conj(), Uq.conj(), C_in['qq3'])
    C['dd'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ud, Ud, Ud.conj(), Ud.conj(), C_in['dd'])
    C['uu'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Uu, Uu.conj(), Uu.conj(), C_in['uu'])
    C['ud1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ud, Uu.conj(), Ud.conj(), C_in['ud1'])
    C['ud8'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ud, Uu.conj(), Ud.conj(), C_in['ud8'])
    C['qu1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Uu, Uq.conj(), Uu.conj(), C_in['qu1'])
    C['qu8'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Uu, Uq.conj(), Uu.conj(), C_in['qu8'])
    C['qd1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ud, Uq.conj(), Ud.conj(), C_in['qd1'])
    C['qd8'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ud, Uq.conj(), Ud.conj(), C_in['qd8'])
    C['quqd1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ud, Uq.conj(), Uq.conj(), C_in['quqd1'])
    C['quqd8'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ud, Uq.conj(), Uq.conj(), C_in['quqd8'])
    C['lq1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Uq, Ul.conj(), Uq.conj(), C_in['lq1'])
    C['lq3'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Uq, Ul.conj(), Uq.conj(), C_in['lq3'])
    C['ld'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Ud, Ul.conj(), Ud.conj(), C_in['ld'])
    C['lu'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ul, Uu, Ul.conj(), Uu.conj(), C_in['lu'])
    C['qe'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ue, Uq.conj(), Ue.conj(), C_in['qe'])
    C['ed'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Ud, Ue.conj(), Ud.conj(), C_in['ed'])
    C['eu'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Uu, Ue.conj(), Uu.conj(), C_in['eu'])
    C['ledq'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Uq, Ul.conj(), Ud.conj(), C_in['ledq'])
    C['lequ1'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Uu, Ul.conj(), Uq.conj(), C_in['lequ1'])
    C['lequ3'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Ue, Uu, Ul.conj(), Uq.conj(), C_in['lequ3'])
    C['duql'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ul, Ud, Uq, C_in['duql'])
    C['qque'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ue, Uq, Uu, C_in['qque'])
    C['qqql'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uq, Ul, Uq, Uq, C_in['qqql'])
    C['duue'] = np.einsum('jb,ld,ia,kc,ijkl->abcd', Uu, Ue, Ud, Uu, C_in['duue'])
    return C
